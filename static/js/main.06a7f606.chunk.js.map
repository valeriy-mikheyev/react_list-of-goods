{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","NONE","sortByLength","setState","LENGTH","sortByAlphabet","ALPHABET","reverse","reset","this","updatedGoods","goods","visibleGoods","sort","g1","g2","localeCompare","length","getReorderedGoods","className","type","onClick","classNames","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,wGAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA4CE,IAAME,EAAb,4MACEC,MAAyB,CACvBC,YAAY,EACZC,SAAUL,EAASM,MAHvB,EAMEC,aAAe,WACb,EAAKC,SAAS,CAAEH,SAAUL,EAASS,UAPvC,EAUEC,eAAiB,WACf,EAAKF,SAAS,CAAEH,SAAUL,EAASW,YAXvC,EAcEC,QAAU,WACR,EAAKJ,UAAS,SAAAL,GAAK,MAAK,CACtBC,YAAaD,EAAMC,gBAhBzB,EAoBES,MAAQ,WACN,EAAKL,SAAS,CACZJ,YAAY,EACZC,SAAUL,EAASM,QAvBzB,4CA2BE,WACE,MAAiCQ,KAAKX,MAA9BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SAEdU,EA9DH,SACLC,EADK,GAGJ,IADCX,EACF,EADEA,SAAUD,EACZ,EADYA,WAGNa,EAAY,YAAOD,GAezB,OAXAC,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQf,GACN,KAAKL,EAASW,SACZ,OAAOQ,EAAGE,cAAcD,GAC1B,KAAKpB,EAASS,OACZ,OAAOU,EAAGG,OAASF,EAAGE,OACxB,QACE,OAAO,MAITlB,EACKa,EAAaL,UAGfK,EAsCgBM,CACnBtB,EACAa,KAAKX,OAGP,OACE,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAASZ,KAAKJ,eACdc,UAAWG,IACT,iBAAkB,CAChB,WAAYtB,IAAaL,EAASW,WALxC,iCAYA,wBACEc,KAAK,SACLC,QAASZ,KAAKP,aACdiB,UAAWG,IACT,oBAAqB,CACnB,WAAYtB,IAAaL,EAASS,SALxC,4BAYA,wBACEgB,KAAK,SACLC,QAASZ,KAAKF,QACdY,UAAWG,IACT,oBAAqB,CACnB,YAAavB,IALnB,sBAYEC,IAAaL,EAASM,MAAQF,IAC9B,wBACEqB,KAAK,SACLD,UAAU,4BACVE,QAASZ,KAAKD,MAHhB,sBASJ,6BACGE,EAAaa,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,eAxFnB,GAAyBC,IAAMC,WC3D/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.06a7f606.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n\n  visibleGoods.sort((g1, g2): number => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return g1.localeCompare(g2);\n      case SortType.LENGTH:\n        return g1.length - g2.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  sortByLength = () => {\n    this.setState({ sortType: SortType.LENGTH });\n  };\n\n  sortByAlphabet = () => {\n    this.setState({ sortType: SortType.ALPHABET });\n  };\n\n  reverse = () => {\n    this.setState(state => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  reset = () => {\n    this.setState({\n      isReversed: false,\n      sortType: SortType.NONE,\n    });\n  };\n\n  render() {\n    const { isReversed, sortType } = this.state;\n\n    const updatedGoods = getReorderedGoods(\n      goodsFromServer,\n      this.state,\n    );\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            onClick={this.sortByAlphabet}\n            className={classNames(\n              'button is-info', {\n                'is-light': sortType !== SortType.ALPHABET,\n              },\n            )}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={this.sortByLength}\n            className={classNames(\n              'button is-success', {\n                'is-light': sortType !== SortType.LENGTH,\n              },\n            )}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={this.reverse}\n            className={classNames(\n              'button is-warning', {\n                'is-light': !isReversed,\n              },\n            )}\n          >\n            Reverse\n          </button>\n\n          {(sortType !== SortType.NONE || isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.reset}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n        <ul>\n          {updatedGoods.map(good => (\n            <li\n              data-cy=\"Good\"\n              key={good}\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}